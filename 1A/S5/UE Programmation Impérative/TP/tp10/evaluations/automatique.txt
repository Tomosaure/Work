% Validation de http://hpxc/cregut.svn.enseeiht.fr/2021/1sn/pim/tps/tbonetto/tp10
% Run on 2021-12-06 08:19:36.529589


################################################################################
# Modification des fichiers fournis
################################################################################


================================================================================
## Fichiers qui NE devaient PAS être modifiés
================================================================================

* Fichier alea.adb non modifié... ok
* Fichier alea.ads non modifié... ok
* Fichier exemple_alea.adb non modifié... ok
* Fichier exemple_unbounded_string.adb non modifié... ERREUR

  | 9d8
  | <     a : Unbounded_String;
  | 13c12
  | <      a := To_Unbounded_String("abc");
  | ---
  | > 
  | 23c22
  | < 	Put_Line ("Son initiale est " & To_String (Chaine) (2));
  | ---
  | > 	Put_Line ("Son initiale est " & To_String (Chaine) (1));
  | 30,37c29,32
  | < 	--Put ("Donner une chaîne : ");
  | < 	--Chaine := Get_Line;
  | <     --Put_Line ("La chaine lu est  : "  & Chaine);
  | <     if To_String (a) (1) < To_String (Chaine) (1) then
  | <         Put("ok");
  | <     else
  | <         Put("n");
  | <     end if;
  | ---
  | > 	Put ("Donner une chaîne : ");
  | > 	Chaine := Get_Line;
  | > 	Put_Line ("La chaine lu est  : "  & Chaine);
  | > 

* Fichier sda_exceptions.ads non modifié... ok
* Fichier test_lca.adb non modifié... ERREUR

  | 246c247
  | < 				Null;
  | ---
  | > 				null;


================================================================================
## Fichiers qui DEVAIENT être modifiés
================================================================================

* Fichier lca_sujet.adb modifié... ok
* Fichier lca.ads modifié... ok
* Fichier lca.adb modifié... ok
* Fichier evaluer_alea_lca.adb modifié... ok
* Fichier th_sujet.adb modifié... ok
* Fichier test_th.adb modifié... ok
* Fichier th.ads modifié... ok
* Fichier th.adb modifié... ok
* Fichier evaluer_alea_th.adb modifié... ok


################################################################################
# Nettoyer
################################################################################

* Running gnatclean... ok


################################################################################
# Exercice 1
################################################################################


================================================================================
## Modifications de lca.ads
================================================================================

* Comparaison de lca.ads et fournis/lca.ads... différents

   | private                                                                                            <
   |                                                                                                    <
   |         type T_Cellule;                                                                            <
   |         type T_LCA is access T_Cellule;                                                            |  private
   |         type T_Cellule is                                                                          |          -- TODO : à compléter
   |                 record                                                                             <
   |                         Cle : T_Cle;                                                               <
   |                         Donnee : T_Donnee;                                                         <
   |                         Suivant : T_LCA;                                                           <
   |                 end record;                                                                        <


================================================================================
## Exécution de lca_sujet.adb
================================================================================

* Compilation de lca_sujet.adb... ok
* ./lca_sujet... ok
* valgrind ./lca_sujet... ok

================================================================================
## Exécution de test_lca.adb
================================================================================

* Compilation de test_lca.adb... ok

  | test_lca.adb:256:17: warning: variable "Inutile" is assigned but never read
  | test_lca.adb:279:35: warning: formal parameter "Cle" is not referenced

* ./test_lca... ok
* valgrind ./test_lca... ERREUR

  ! ==317033== Memcheck, a memory error detector
  ! ==317033== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
  ! ==317033== Using Valgrind-3.17.0 and LibVEX; rerun with -h for copyright info
  ! ==317033== Command: ./test_lca
  ! ==317033== 
  ! ==317033== 
  ! ==317033== HEAP SUMMARY:
  ! ==317033==     in use at exit: 640 bytes in 14 blocks
  ! ==317033==   total heap usage: 176 allocs, 162 frees, 13,008 bytes allocated
  ! ==317033== 
  ! ==317033== 640 (48 direct, 592 indirect) bytes in 1 blocks are definitely lost in loss record 9 of 9
  ! ==317033==    at 0x4843839: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
  ! ==317033==    by 0x4AE1FEE: __gnat_malloc (in /usr/lib/x86_64-linux-gnu/libgnat-10.so)
  ! ==317033==    by 0x4B0F50C: system__pool_global__allocate (in /usr/lib/x86_64-linux-gnu/libgnat-10.so)
  ! ==317033==    by 0x4B1F176: system__storage_pools__subpools__allocate_any_controlled (in /usr/lib/x86_64-linux-gnu/libgnat-10.so)
  ! ==317033==    by 0x10DCB0: test_lca__lca_string_integer__enregistrer__P322b.7 (lca.adb:57)
  ! ==317033==    by 0x10DAE5: test_lca__lca_string_integer__enregistrer.6 (lca.adb:36)
  ! ==317033==    by 0x11076F: test_lca__tester_remplacer_un_element__tester_remplacer_un_element.34 (test_lca.adb:209)
  ! ==317033==    by 0x110A12: test_lca__tester_remplacer_un_element.33 (test_lca.adb:229)
  ! ==317033==    by 0x10D32B: _ada_test_lca (test_lca.adb:374)
  ! ==317033==    by 0x10CBAC: main (b~test_lca.adb:288)
  ! ==317033== 
  ! ==317033== LEAK SUMMARY:
  ! ==317033==    definitely lost: 48 bytes in 1 blocks
  ! ==317033==    indirectly lost: 592 bytes in 13 blocks
  ! ==317033==      possibly lost: 0 bytes in 0 blocks
  ! ==317033==    still reachable: 0 bytes in 0 blocks
  ! ==317033==         suppressed: 0 bytes in 0 blocks
  ! ==317033== 
  ! ==317033== For lists of detected and suppressed errors, rerun with: -s
  ! ==317033== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)



################################################################################
# Exercice 2
################################################################################


================================================================================
## Différences entre lca.ads et th.ads
================================================================================

* Comparaison de lca.ads et th.ads... différents

   |                                                                                                    |  with LCA;
   | -- Définition de structures de données associatives sous forme d'une liste                         <
   | -- chaînée associative (LCA).                                                                      <
   |                                                                                                    >      Capacite : Integer;
   |                                                                                                    >      with function Hachage(Cle : in T_Cle) return Integer; --fonction de hachage sur la taille de l
   | package LCA is                                                                                     |  package TH is
   |         procedure Initialiser(Sda: out T_LCA) with                                                 |          procedure Initialiser_TH(Sda: out T_TH) with    
   |                 Post => Est_Vide (Sda);                                                            |                  Post => Est_Vide_TH(Sda);  
   |         function Est_Vide (Sda : T_LCA) return Boolean;                                            |          function Est_Vide_TH (Sda : T_TH) return Boolean;    
   |         function Taille (Sda : in T_LCA) return Integer with                                       |          function Taille_TH (Sda : in T_TH) return Integer with    
   |                 Post => Taille'Result >= 0                                                         |                  Post => Taille_TH'Result >= 0  
   |                         and (Taille'Result = 0) = Est_Vide (Sda);                                  |                          and (Taille_TH'Result = 0) = Est_Vide_TH (Sda);    
   |         procedure Enregistrer (Sda : in out T_LCA ; Cle : in T_Cle ; Donnee : in T_Donnee) with    |          procedure Enregistrer_TH (Sda : in out T_TH ; Cle : in T_Cle ; Donnee : in T_Donnee) w    
   |                 Post => Cle_Presente (Sda, Cle) and (La_Donnee (Sda, Cle) = Donnee)   -- donnée in |                  Post => Cle_Presente_TH (Sda, Cle) and (La_Donnee_TH (Sda, Cle) = Donnee)   --    
   |                                 and (not (Cle_Presente (Sda, Cle)'Old) or Taille (Sda) = Taille (S |                                  and (not (Cle_Presente_TH (Sda, Cle)'Old) or Taille_TH (Sda) =    
   |                                 and (Cle_Presente (Sda, Cle)'Old or Taille (Sda) = Taille (Sda)'Ol |                                  and (Cle_Presente_TH (Sda, Cle)'Old or Taille_TH (Sda) = Taill    
   |         procedure Supprimer (Sda : in out T_LCA ; Cle : in T_Cle) with                             |          procedure Supprimer_TH (Sda : in out T_TH ; Cle : in T_Cle) with    
   |                 Post =>  Taille (Sda) = Taille (Sda)'Old - 1 -- un élément de moins                |                  Post =>  Taille_TH (Sda) = Taille_TH (Sda)'Old - 1 -- un élément de moins    
   |                         and not Cle_Presente (Sda, Cle);         -- la clé a été supprimée         |                          and not Cle_Presente_TH (Sda, Cle);         -- la clé a été supprimée  
   |         function Cle_Presente (Sda : in T_LCA ; Cle : in T_Cle) return Boolean;                    |      function Cle_Presente_TH (Sda : in T_TH ; Cle : in T_Cle) return Boolean;    
   |         function La_Donnee (Sda : in T_LCA ; Cle : in T_Cle) return T_Donnee;                      |          function La_Donnee_TH (Sda : in T_TH ; Cle : in T_Cle) return T_Donnee;    
   |         procedure Vider (Sda : in out T_LCA) with                                                  |          procedure Vider_TH (Sda : in out T_TH) with    
   |                 Post => Est_Vide (Sda);                                                            |                  Post => Est_Vide_TH(Sda);  
   |         procedure Pour_Chaque (Sda : in T_LCA);                                                    |        procedure Pour_Chaque_TH(Sda : in T_TH);    
   |                                                                                                    >  package LCA_new is new LCA (T_Cle, T_Donnee);
   |                                                                                                    >      use LCA_new;
   |                                                                                                    >      type T_TH is array (1..Capacite) of T_LCA;  
   |         type T_Cellule;                                                                            <
   |                                                                                                    <
   |         type T_LCA is access T_Cellule;                                                            <
   |                                                                                                    <
   |         type T_Cellule is                                                                          <
   |                 record                                                                             <
   |                         Cle : T_Cle;                                                               <
   |                         Donnee : T_Donnee;                                                         <
   |                         Suivant : T_LCA;                                                           <
   |                 end record;                                                                        <
   | end LCA;                                                                                           |  end TH;


================================================================================
## Différences entre test_lca.ads et test_th.ads
================================================================================

* Comparaison de test_lca.adb et test_th.adb... différents

   |         --! Les Unbounded_String ont une capacité variable, contrairement au String                |  with TH;
   |         --! pour lesquelles une capacité doit être fixée.                                          <
   | with LCA;                                                                                          <
   |         package LCA_String_Integer is                                                              |          package TH_String_Integer is
   |                 new LCA (T_Cle => Unbounded_String, T_Donnee => Integer);                          |                  new TH (T_Cle => Unbounded_String, T_Donnee => Integer, Capacite => 20, Hachage =>
   |         use LCA_String_Integer;                                                                    |          use TH_String_Integer;
   |                 new Pour_Chaque (Afficher);                                                        |                  new Pour_Chaque_TH(Afficher);  
   |                 Initialiser (Annuaire);                                                            |                  Initialiser_TH(Annuaire);  
   |                 pragma Assert (Est_Vide (Annuaire));                                               |                  pragma Assert (Est_Vide_TH(Annuaire));  
   |                 pragma Assert (Taille (Annuaire) = 0);                                             |                  pragma Assert (Taille_TH(Annuaire) = 0);  
   |                         Enregistrer (Annuaire, Cles (I), Donnees (I));                             |                          Enregistrer_TH(Annuaire, Cles (I), Donnees (I));  
   |                         pragma Assert (not Est_Vide (Annuaire));                                   |                          pragma Assert (not Est_Vide_TH(Annuaire));  
   |                         pragma Assert (Taille (Annuaire) = I);                                     |                          pragma Assert (Taille_TH(Annuaire) = I);  
   |                                 pragma Assert (La_Donnee (Annuaire, Cles (J)) = Donnees (J));      |                                  pragma Assert (La_Donnee_TH(Annuaire, Cles (J)) = Donnees (J));  
   |                                 pragma Assert (not Cle_Presente (Annuaire, Cles (J)));             |                                  pragma Assert (not Cle_Presente_TH(Annuaire, Cles (J)));  
   |                 Vider (Annuaire);                                                                  |                  Vider_TH(Annuaire);  
   |                         Supprimer (Annuaire, Cles (I));                                            |                          Supprimer_TH(Annuaire, Cles (I));  
   |                                 pragma Assert (Cle_Presente (Annuaire, Cles (J)));                 |                                  pragma Assert (Cle_Presente_TH(Annuaire, Cles (J)));  
   |                                 pragma Assert (La_Donnee (Annuaire, Cles (J)) = Donnees (J));      |                                  pragma Assert (La_Donnee_TH(Annuaire, Cles (J)) = Donnees (J));  
   |                                 pragma Assert (not Cle_Presente (Annuaire, Cles (J)));             |                                  pragma Assert (not Cle_Presente_TH(Annuaire, Cles (J)));  
   |                 Vider (Annuaire);                                                                  |                  Vider_TH(Annuaire);  
   |                         Supprimer (Annuaire, Cles (I));                                            |                          Supprimer_TH(Annuaire, Cles (I));  
   |                                 pragma Assert (not Cle_Presente (Annuaire, Cles (J)));             |                                  pragma Assert (not Cle_Presente_TH(Annuaire, Cles (J)));  
   |                                 pragma Assert (Cle_Presente (Annuaire, Cles (J)));                 |                                  pragma Assert (Cle_Presente_TH(Annuaire, Cles (J)));  
   |                                 pragma Assert (La_Donnee (Annuaire, Cles (J)) = Donnees (J));      |                                  pragma Assert (La_Donnee_TH(Annuaire, Cles (J)) = Donnees (J));  
   |                 Vider (Annuaire);                                                                  |                  Vider_TH(Annuaire);  
   |                         Supprimer (Annuaire, Cles (Indice));                                       |                          Supprimer_TH(Annuaire, Cles (Indice));  
   |                                         pragma Assert (not Cle_Presente (Annuaire, Cles (J)));     |                                          pragma Assert (not Cle_Presente_TH(Annuaire, Cles (J)));  
   |                                         pragma Assert (Cle_Presente (Annuaire, Cles (J)));         |                                          pragma Assert (Cle_Presente_TH(Annuaire, Cles (J)));  
   |                         Vider (Annuaire);                                                          |                          Vider_TH(Annuaire);  
   |                         enregistrer (Annuaire, Cles (Indice), Nouveau);                            |                          Enregistrer_TH(Annuaire, Cles (Indice), Nouveau);  
   |                                 pragma Assert (Cle_Presente (Annuaire, Cles (J)));                 |                                  pragma Assert (Cle_Presente_TH(Annuaire, Cles (J)));  
   |                                         pragma Assert (La_Donnee (Annuaire, Cles (J)) = Nouveau);  |                                          pragma Assert (La_Donnee_TH(Annuaire, Cles (J)) = Nouvea  
   |                                         pragma Assert (La_Donnee (Annuaire, Cles (J)) = Donnees (J |                                          pragma Assert (La_Donnee_TH(Annuaire, Cles (J)) = Donnee  
   |                         Vider (Annuaire);                                                          |                          Vider_TH(Annuaire);  
   |                         Supprimer (Annuaire, Inconnu);                                             |                          Supprimer_TH(Annuaire, Inconnu);  
   |                 Vider (Annuaire);                                                                  |                  Vider_TH(Annuaire);  
   |                         Inutile := La_Donnee (Annuaire, Inconnu);                                  |                          Inutile := La_Donnee_TH(Annuaire, Inconnu);  
   |                 Vider (Annuaire);                                                                  |                  Vider_TH(Annuaire);  
   |                         new Pour_Chaque (Sommer);                                                  |                          new Pour_Chaque_TH(Sommer);  
   |                 Vider(Annuaire);                                                                   |                  Vider_TH(Annuaire);  
   |                         new Pour_Chaque (Sommer_Cle_Commence_Par_Q);                               |                          new Pour_Chaque_TH(Sommer_Cle_Commence_Par_Q);  
   |                 Vider(Annuaire);                                                                   |                  Vider_TH(Annuaire);  
   |                         new Pour_Chaque (Sommer_Len4_Erreur);                                      |                          new Pour_Chaque_TH(Sommer_Len4_Erreur);  
   |                 Vider(Annuaire);                                                                   |                  Vider_TH(Annuaire);  


================================================================================
## Exécution de th_sujet.adb
================================================================================

* Compilation de th_sujet.adb... ok
* ./th_sujet... ok
* valgrind ./th_sujet... ok

================================================================================
## Exécution de test_th.adb
================================================================================

* Compilation de test_th.adb... ok

  | test_th.adb:254:17: warning: variable "Inutile" is assigned but never read
  | test_th.adb:277:35: warning: formal parameter "Cle" is not referenced

* ./test_th... ok
* valgrind ./test_th... ERREUR

  ! ==317066== Memcheck, a memory error detector
  ! ==317066== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
  ! ==317066== Using Valgrind-3.17.0 and LibVEX; rerun with -h for copyright info
  ! ==317066== Command: ./test_th
  ! ==317066== 
  ! ==317066== 
  ! ==317066== HEAP SUMMARY:
  ! ==317066==     in use at exit: 640 bytes in 14 blocks
  ! ==317066==   total heap usage: 176 allocs, 162 frees, 13,008 bytes allocated
  ! ==317066== 
  ! ==317066== 640 (48 direct, 592 indirect) bytes in 1 blocks are definitely lost in loss record 9 of 9
  ! ==317066==    at 0x4843839: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
  ! ==317066==    by 0x4AE1FEE: __gnat_malloc (in /usr/lib/x86_64-linux-gnu/libgnat-10.so)
  ! ==317066==    by 0x4B0F50C: system__pool_global__allocate (in /usr/lib/x86_64-linux-gnu/libgnat-10.so)
  ! ==317066==    by 0x4B1F176: system__storage_pools__subpools__allocate_any_controlled (in /usr/lib/x86_64-linux-gnu/libgnat-10.so)
  ! ==317066==    by 0x10DCC8: test_th__th_string_integer__lca_new__enregistrer__P367b.15 (lca.adb:57)
  ! ==317066==    by 0x10DAFD: test_th__th_string_integer__lca_new__enregistrer.11 (lca.adb:36)
  ! ==317066==    by 0x10E763: test_th__th_string_integer__enregistrer_th.10 (th.adb:40)
  ! ==317066==    by 0x111234: test_th__tester_remplacer_un_element__tester_remplacer_un_element.49 (test_th.adb:207)
  ! ==317066==    by 0x1114DE: test_th__tester_remplacer_un_element.48 (test_th.adb:227)
  ! ==317066==    by 0x10D342: _ada_test_th (test_th.adb:372)
  ! ==317066==    by 0x10CBBC: main (b~test_th.adb:290)
  ! ==317066== 
  ! ==317066== LEAK SUMMARY:
  ! ==317066==    definitely lost: 48 bytes in 1 blocks
  ! ==317066==    indirectly lost: 592 bytes in 13 blocks
  ! ==317066==      possibly lost: 0 bytes in 0 blocks
  ! ==317066==    still reachable: 0 bytes in 0 blocks
  ! ==317066==         suppressed: 0 bytes in 0 blocks
  ! ==317066== 
  ! ==317066== For lists of detected and suppressed errors, rerun with: -s
  ! ==317066== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)



################################################################################
# Exercice 3
################################################################################


================================================================================
## Différences entre evaluer_alea_lca.ads et evaluer_alea_th.ads
================================================================================

* Comparaison de evaluer_alea_lca.adb et evaluer_alea_th.adb... différents

   | with LCA;                                                                                          |  with TH;
   | -- Évaluer la qualité du générateur aléatoire et les LCA.                                          |
   |                                                                                                    >  -- Évaluer la qualité du générateur aléatoire et les TH.
   |          package LCA_alea is                                                                       |           function Identite(Cle : in Integer) return Integer is
   |               new LCA (Integer,Integer);                                                           |           begin
   |         use LCA_alea;                                                                              |                return Cle;
   |                                                                                                    >           end Identite;
   |                                                                                                    >          package TH_alea is
   |                                                                                                    >                new TH (T_Cle => Integer,T_Donnee => Integer, Capacite => 1000, Hachage => Identite)
   |                                                                                                    >          use TH_alea;
   |         Initialiser(Sda);                                                                          |             Initialiser_TH(Sda);  
   |             if Cle_Presente(Sda,Nombre) then                                                       |              if Cle_Presente_TH(Sda,Nombre) then  
   |                 Enregistrer(Sda,Nombre,La_Donnee(Sda,Nombre)+1);                                   |                  Enregistrer_TH(Sda,Nombre,La_Donnee_TH(Sda,Nombre)+1);    
   |                 Enregistrer(Sda,Nombre,1);                                                         |                  Enregistrer_TH(Sda,Nombre,1);  
   |             if Cle_Presente(Sda,i) then                                                            |              if Cle_Presente_TH(Sda,i) then  
   |                 if La_Donnee(Sda,i) < Min then                                                     |                  if La_Donnee_TH(Sda,i) < Min then  
   |                     Min := La_Donnee(Sda,i);                                                       |                      Min := La_Donnee_TH(Sda,i);  
   |                 elsif La_Donnee(Sda,i) > Max then                                                  |                  elsif La_Donnee_TH(Sda,i) > Max then  
   |                     Max := La_Donnee(Sda,i);                                                       |                      Max := La_Donnee_TH(Sda,i);  


================================================================================
## Exécutions de evaluer_alea_*
================================================================================

* Running gnatclean... ok
* Compilation de evaluer_alea_lca.adb... ok

  | evaluer_alea_lca.adb:4:06: warning: no entities of "SDA_Exceptions" are referenced
  | evaluer_alea_lca.adb:4:33: warning: use clause for package "SDA_Exceptions" has no effect

* Compilation de evaluer_alea_th.adb... ok

  | evaluer_alea_th.adb:4:06: warning: no entities of "SDA_Exceptions" are referenced
  | evaluer_alea_th.adb:4:28: warning: use clause for package "SDA_Exceptions" has no effect


================================================================================
## Tests nominaux
================================================================================


--------------------------------------------------------------------------------
### Cas : Classique : dé à 6 faces, 100 tirages
--------------------------------------------------------------------------------

* ./evaluer_alea_lca 6 100... ok

  | Borne  : 6
  | Taille : 100
  | Min : 14
  | Max : 19

* valgrind ./evaluer_alea_lca 6 100... ERREUR

  ! ==317107== Memcheck, a memory error detector
  ! ==317107== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
  ! ==317107== Using Valgrind-3.17.0 and LibVEX; rerun with -h for copyright info
  ! ==317107== Command: ./evaluer_alea_lca 6 100
  ! ==317107== 
  ! ==317107== 
  ! ==317107== HEAP SUMMARY:
  ! ==317107==     in use at exit: 1,600 bytes in 100 blocks
  ! ==317107==   total heap usage: 111 allocs, 11 frees, 8,144 bytes allocated
  ! ==317107== 
  ! ==317107== 96 (16 direct, 80 indirect) bytes in 1 blocks are definitely lost in loss record 2 of 3
  ! ... lignes suivantes supprimées ...

* ./evaluer_alea_th 6 100... ok

  | Borne  : 6
  | Taille : 100
  | Min : 9
  | Max : 24

* valgrind ./evaluer_alea_th 6 100... ERREUR

  ! ==317109== Memcheck, a memory error detector
  ! ==317109== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
  ! ==317109== Using Valgrind-3.17.0 and LibVEX; rerun with -h for copyright info
  ! ==317109== Command: ./evaluer_alea_th 6 100
  ! ==317109== 
  ! ==317109== 
  ! ==317109== HEAP SUMMARY:
  ! ==317109==     in use at exit: 1,600 bytes in 100 blocks
  ! ==317109==   total heap usage: 111 allocs, 11 frees, 8,144 bytes allocated
  ! ==317109== 
  ! ==317109== 96 bytes in 6 blocks are definitely lost in loss record 1 of 2
  ! ... lignes suivantes supprimées ...


--------------------------------------------------------------------------------
### Cas : Beaucoup de doubles
--------------------------------------------------------------------------------

* ./evaluer_alea_lca 5 100... ok

  | Borne  : 5
  | Taille : 100
  | Min : 14
  | Max : 26

* ./evaluer_alea_th 5 100... ok

  | Borne  : 5
  | Taille : 100
  | Min : 16
  | Max : 24


--------------------------------------------------------------------------------
### Cas : Peu de doubles
--------------------------------------------------------------------------------

* ./evaluer_alea_lca 100000 10... ok

  | Borne  : 100000
  | Taille : 10
  | Min : 1
  | Max : 1

* ./evaluer_alea_th 100000 10... ok

  | Borne  : 100000
  | Taille : 10
  | Min : 1
  | Max : 1


--------------------------------------------------------------------------------
### Cas : Limite pour Borne et Taille
--------------------------------------------------------------------------------

* ./evaluer_alea_lca 2 2... ok

  | Borne  : 2
  | Taille : 2
  | Min : 1
  | Max : 1

* ./evaluer_alea_th 2 2... ok

  | Borne  : 2
  | Taille : 2
  | Min : 2
  | Max : 2


================================================================================
## Tests de robustesse
================================================================================


--------------------------------------------------------------------------------
### Cas : Deux entiers attendus
--------------------------------------------------------------------------------

* ./evaluer_alea_lca XYZ ZYT... ok

  | Erreur de saisie Borne/Taille, Recommencez

* ./evaluer_alea_th XYZ ZYT... ok

  | Erreur de saisie Borne/Taille, Recommencez


--------------------------------------------------------------------------------
### Cas : Taille doit être un entier
--------------------------------------------------------------------------------

* ./evaluer_alea_lca 10 ZYT... ok

  | Erreur de saisie Borne/Taille, Recommencez

* ./evaluer_alea_th 10 ZYT... ok

  | Erreur de saisie Borne/Taille, Recommencez


--------------------------------------------------------------------------------
### Cas : Borne doit être un entier
--------------------------------------------------------------------------------

* ./evaluer_alea_lca XYZ 30... ok

  | Erreur de saisie Borne/Taille, Recommencez

* ./evaluer_alea_th XYZ 30... ok

  | Erreur de saisie Borne/Taille, Recommencez


--------------------------------------------------------------------------------
### Cas : Borne et Taille doivent être strictement positifs
--------------------------------------------------------------------------------

* ./evaluer_alea_lca -4 -10... ok

  | Borne  : -4
  | Taille : -10
  | Min : -10
  | Max : 1

* ./evaluer_alea_th -4 -10... ok

  | Borne  : -4
  | Taille : -10
  | Min : -10
  | Max : 1


--------------------------------------------------------------------------------
### Cas : Taille doit être strictement positif
--------------------------------------------------------------------------------

* ./evaluer_alea_lca 4 -10... ok

  | Borne  : 4
  | Taille : -10
  | Min : -10
  | Max : 1

* ./evaluer_alea_th 4 -10... ok

  | Borne  : 4
  | Taille : -10
  | Min : -10
  | Max : 1


--------------------------------------------------------------------------------
### Cas : Borne doit être strictement positif
--------------------------------------------------------------------------------

* ./evaluer_alea_lca -4 10... ok

  | Borne  : -4
  | Taille : 10
  | Erreur de saisie Borne/Taille, Recommencez

* ./evaluer_alea_th -4 10... ok

  | Borne  : -4
  | Taille : 10
  | Erreur de saisie Borne/Taille, Recommencez


--------------------------------------------------------------------------------
### Cas : Il manque la taille (ou la borne)
--------------------------------------------------------------------------------

* ./evaluer_alea_lca 5... ok

  | Usage : ./evaluer_alea_lca Borne Taille
  | 
  |    Borne  : les nombres sont tirés dans l'intervalle 1..Borne
  |    Taille : la taille de l'échantillon

* ./evaluer_alea_th 5... ok

  | Usage : ./evaluer_alea_th Borne Taille
  | 
  |    Borne  : les nombres sont tirés dans l'intervalle 1..Borne
  |    Taille : la taille de l'échantillon


--------------------------------------------------------------------------------
### Cas : Borne doit être un entier ou il manque la taille
--------------------------------------------------------------------------------

* ./evaluer_alea_lca XYZ... ok

  | Usage : ./evaluer_alea_lca Borne Taille
  | 
  |    Borne  : les nombres sont tirés dans l'intervalle 1..Borne
  |    Taille : la taille de l'échantillon

* ./evaluer_alea_th XYZ... ok

  | Usage : ./evaluer_alea_th Borne Taille
  | 
  |    Borne  : les nombres sont tirés dans l'intervalle 1..Borne
  |    Taille : la taille de l'échantillon


--------------------------------------------------------------------------------
### Cas : Taille doit être strictement positif
--------------------------------------------------------------------------------

* ./evaluer_alea_lca 4 0... ok

  | Borne  : 4
  | Taille : 0
  | Min : 0
  | Max : 1

* ./evaluer_alea_th 4 0... ok

  | Borne  : 4
  | Taille : 0
  | Min : 0
  | Max : 1


--------------------------------------------------------------------------------
### Cas : Borne doit être strictement positif
--------------------------------------------------------------------------------

* ./evaluer_alea_lca 0 100... ok

  | Borne  : 0
  | Taille : 100
  | Erreur de saisie Borne/Taille, Recommencez

* ./evaluer_alea_th 0 100... ok

  | Borne  : 0
  | Taille : 100
  | Erreur de saisie Borne/Taille, Recommencez


--------------------------------------------------------------------------------
### Cas : Borne = 1 : Ne respecte pas la précondition de Calculer_Statistiques
--------------------------------------------------------------------------------

* ./evaluer_alea_lca 1 100... ok

  | Borne  : 1
  | Taille : 100
  | Min : 100
  | Max : 100

* ./evaluer_alea_th 1 100... ok

  | Borne  : 1
  | Taille : 100
  | Min : 100
  | Max : 100


--------------------------------------------------------------------------------
### Cas : Taille = 1 : Ne respecte pas la précondition de Calculer_Statistiques
--------------------------------------------------------------------------------

* ./evaluer_alea_lca 10 1... ok

  | Borne  : 10
  | Taille : 1
  | Min : 1
  | Max : 1

* ./evaluer_alea_th 10 1... ok

  | Borne  : 10
  | Taille : 1
  | Min : 1
  | Max : 1



################################################################################
# Nettoyer
################################################################################

* Running gnatclean... ok

<!-- vi: set ts=8: -->
