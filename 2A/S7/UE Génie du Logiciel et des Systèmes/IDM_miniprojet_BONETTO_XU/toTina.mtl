[comment encoding = UTF-8 /]
[module toTina('http://petrinet')]


[template public PetriNetToTina(aPetriNet : PetriNet)]
[comment @main/]
[file (aPetriNet.name + '.net', false, 'UTF-8')]
net [aPetriNet.name/]
[let places: OrderedSet(Place) = aPetriNet.getPlaces() ]
[for (place: Place | places)]
pl [place.name/] ([place.jetons/])
[/for]
[/let]

[let transitions: OrderedSet(Transition) = aPetriNet.getTransitions() ]
[for (transition: Transition | transitions)]
tr [transition.name/] [for (arc:Arc | transition.predecessors)] [arc.source.name/][if (arc.type = arcType::readArc)]?[arc.poids/][elseif (arc.poids > 1)]*[arc.poids/][/if][/for] -> [for (arc: Arc | transition.successors)] [arc.destination.name/][if (arc.type = arcType::readArc)]?[arc.poids/][elseif (arc.poids > 1)]*[arc.poids/][/if][/for]
[/for]
[/let]


[/file]
[/template]

[query public getPlaces(p: PetriNet): OrderedSet(Place) =
	p.petriNetElements ->select(e | e.oclIsTypeOf(Place))
		->collect (e | e.oclAsType(Place))
		->asOrderedSet()
/]

[query public getTransitions(p: PetriNet): OrderedSet(Transition) =
	p.petriNetElements ->select(e | e.oclIsTypeOf(Transition))
		->collect (e | e.oclAsType(Transition))
		->asOrderedSet()
/]